services:
  gateway:
    platform: linux/arm64
    build:
      context: .
      dockerfile: docker/gateway/Dockerfile
    working_dir: /src/apps/gateway
    volumes:
      - .:/src
      - gopath:/go/pkg/mod
      - gocache:/root/.cache/go-build
    env_file:
      - apps/gateway/.env
    ports:
      - "8080:8080"
    depends_on:
      auth-svc:
        condition: service_started
  auth-svc:
    platform: linux/arm64
    build:
      context: .
      dockerfile: docker/auth-svc/Dockerfile
    working_dir: /src/apps/auth-svc
    volumes:
      - .:/src
      - gopath:/go/pkg/mod
      - gocache:/root/.cache/go-build
    env_file:
      - apps/auth-svc/.env
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
  notification-svc:
      platform: linux/arm64
      build:
        context: .
        dockerfile: docker/notification-svc/Dockerfile
      working_dir: /src/apps/notification-svc
      volumes:
        - .:/src
        - gopath:/go/pkg/mod
        - gocache:/root/.cache/go-build
      env_file:
        - apps/notification-svc/.env
      ports:
        - "8082:8082"
      restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: life-rpg-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./docker/pg-init:/docker-entrypoint-initdb.d:ro
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 2s
      timeout: 2s
      retries: 30
      start_period: 5s
    restart: unless-stopped
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: life-rpg-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    ports:
        - 8025:8025
        - 1025:1025
    environment:
      MP_UI_AUTH: "root:root"   
      MP_MAX_MESSAGES: 10000
    restart: unless-stopped
  
  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093

      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1

      - KAFKA_HEAP_OPTS=-Xms512m -Xmx512m

    ports:
    - "9094:9094"  
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092 >/dev/null 2>&1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092

volumes:
    pgdata:
    gopath:
    gocache: